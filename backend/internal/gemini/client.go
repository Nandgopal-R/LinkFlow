package gemini

import (
	"context"
	"fmt"
	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
	"strings"
)

type Client struct {
	model *genai.GenerativeModel
}

// NewClient
func NewClient(ctx context.Context, apiKey string) (*Client, error) {
	genaiClient, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return nil, fmt.Errorf("failed to create genai client: %w", err)
	}

	model := genaiClient.GenerativeModel("gemini-pro")
	return &Client{model: model}, nil
}

func (c *Client) GenerateDesc(ctx context.Context, title string, url string) (string, error) {
	prompt := fmt.Sprintf("Generate a conscise one line description for a blog that has the title: '%s', found in the link: '%s'", title, url)

	resp, err := c.model.GenerateContent(ctx, genai.Text(prompt))

	if err != nil {
		return "", fmt.Errorf("Gemini description generation failed: %w", err)
	}
	for _, cand := range resp.Candidates { // Candidates are the generated responses
		for _, part := range cand.Content.Parts {
			if txt, ok := part.(genai.Text); ok {
				words := strings.Fields(string(txt)) // Split the text into words
				cleanedText := strings.Join(words, " ")
				return cleanedText, nil
			}
		}
	}

	return "", fmt.Errorf("no content generated by Gemini")

}
