// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blogs.sql

package db

import (
	"context"
)

const deleteBlogQuery = `-- name: DeleteBlogQuery :exec
DELETE FROM blogs 
where blog_url=$1
`

func (q *Queries) DeleteBlogQuery(ctx context.Context, blogUrl string) error {
	_, err := q.db.ExecContext(ctx, deleteBlogQuery, blogUrl)
	return err
}

const insertBlogQuery = `-- name: InsertBlogQuery :exec
INSERT INTO blogs (title, blog_url, description) 
VALUES($1,$2,$3)
`

type InsertBlogQueryParams struct {
	Title       string
	BlogUrl     string
	Description string
}

func (q *Queries) InsertBlogQuery(ctx context.Context, arg InsertBlogQueryParams) error {
	_, err := q.db.ExecContext(ctx, insertBlogQuery, arg.Title, arg.BlogUrl, arg.Description)
	return err
}

const listBlogs = `-- name: ListBlogs :many
SELECT id, title, blog_url, description, created_at FROM blogs
`

func (q *Queries) ListBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, listBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.BlogUrl,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
